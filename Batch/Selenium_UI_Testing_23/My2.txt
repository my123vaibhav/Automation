types of frameworks---->selenium
1 Modular Testing Framework ----> used
    modules----> (.py)
    every tc cosider in sepreate module ---> test_login.py
                                        ---> test_timeline.py
                                        ---> test_signup.py
    all the modules are independent each other
    sepreate copy of files(.py) are created
    from test_login import test_user

2 Data driven Framework ---> 4 function ----> use ---->
    tc-----> test suite module(.py)
    tc data is outside the module---->
    test_login.py
        usernmae
        pass
    xl or database
    we use the outside tc ----> test manager
        xl---> openpyxl    4 functions--->** file
        database---> pymysql or cx_Oracle
     mockey testing---->test engineer
	 
3 Keyword driven framework---> modular + data driver
    xl---->excel file
    locator,description,keyword,action(optional)
	
4 Hybrid framework with POM----> modules+dependend+data
Page---->collection of locator(web element)
Object ----> instance of class
Module----> .py
POM-----> front side we interact with web pages
        but in coding we interacting to the object
class front_page:
    def test_m():
        return object next page

class resign_page:

10---> 5min----> 10*5
for finding the locators---> web element---> browser---> webdriver
SelectorHub
chropath


** locators on browser--->
all locators are----> attribute
id ----> strong ----> unique ----> minimum time
            unique identification
class ----> multiple on web browser
            list ---> li ul
            checkbox
            dropdown
name ----->
            checkbox or radio button---> can be different
            input type='radio' name='physics'
            input type='radio' name='chem'
            input type='radio' name='math'
linktext
    ---> locator pe click---> new page open
    <a href=''>
    2 types--->
        1 full linktext ----> text
            Register
        2 partial linktest ---> text
            Reg
            ister
css--->
    4 forms
    tag and id
    tag and class
    tag and attribute
    tag class and attribute

xpath-----> ****
    slow
    DOM---> document object model

    1 abs xpath ----> full
    parent ---> start
    /
    /html/body/div[6]/div[2]/ul[1]/li[1]/a

    2 relative xpath ---> partial
    middle start
    //
    //button[normalize-space()='Search']

selenium3---->
driver.find_element_by_id('id of element') ---> uque-->object str
driver.find_element_by_xpath('xpath ')

driver.find_elements_by_class('') ----> collection of elements---> list ---> list


selenium4---->
from selenium.webdriver.common.by import By
driver=webdrive.Chrome()
driver.find_element(By.ID,'id of locator')
driver.find_elements(By.CLASS,'class of locator')
driver.find_element(By.NAME,'NAME of locator')
driver.find_element(By.XPATH,'XPATH of locator')
driver.find_element(By.LINK_TEXT,'LINK TEXT of locator')
driver.find_element(By.CSS,'CSS of locator')



what is directory stucture of our framework---->
1 unittest----> class ---> test case ----> white box---> functional---> coding---> developed
class Test_A(unittest.Testcase):
    def test_a():
        asserEqual
2 pytest-------> functions---> test_* or *_test

drive=webdriver.Chome()
driver.get('url')
driver.maximize_window() ----->max
drive.close()
driver.find_element(by.ID,'id ')

locator.send_keys('input') ----> input to locator
locator.click() ---->
driver.current_url
driver.title

---------------------------------

import time
from selenium import webdriver
from selenium.webdriver.common.by import By
import chromedriver_autoinstaller
chromedriver_autoinstaller.install()
driver=webdriver.Chrome()
driver.get('https://demo.nopcommerce.com/')
driver.maximize_window()
print('before click',driver.current_url)
time.sleep(2)
#driver.find_element(By.LINK_TEXT,'Register').click()
driver.find_element(By.PARTIAL_LINK_TEXT,'Reg').click()
time.sleep(3)
driver.find_element(By.XPATH,'//h1[normalize-space()="Register"]')
print('after click',driver.current_url)

import sys
sys.exit(0)
import time
from selenium import webdriver
from selenium.webdriver.common.by import By
import chromedriver_autoinstaller
chromedriver_autoinstaller.install()

obj=webdriver.Chrome()
obj.get('https://demo.nopcommerce.com/')
obj.maximize_window()

time.sleep(4)
search_obj=obj.find_element(By.ID,'small-searchterms')
search_obj.send_keys('Lenovo')
obj.find_element(By.XPATH,"//button[normalize-space()='Search']").click()
time.sleep(2)